generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model appartenenza {
  id_libro  String @db.Char(13)
  id_genere Int
  genere    genere @relation(fields: [id_genere], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "appartenenza_ibfk_2")
  libro     libro  @relation(fields: [id_libro], references: [isbn_13], onDelete: NoAction, onUpdate: NoAction, map: "appartenenza_ibfk_1")

  @@id([id_libro, id_genere])
  @@index([id_genere], map: "id_genere")
}

model autore {
  id           Int            @id @default(autoincrement())
  nome         String         @db.VarChar(255)
  cognome      String         @db.VarChar(255)
  composizione composizione[]
}

model club_libro {
  id                Int                 @id @default(autoincrement())
  nome              String              @unique(map: "nome") @db.VarChar(255)
  data_creazione    DateTime            @db.Date
  numero_iscritti   Int?                @default(0)
  evento_in_persona evento_in_persona[]
  evento_virtuale   evento_virtuale[]
  iscrizione        iscrizione[]
}

model commento {
  id_utente Int
  id_libro  String   @db.Char(13)
  data_pub  DateTime @db.Timestamp(0)
  testo     String   @db.Text
  libro     libro    @relation(fields: [id_libro], references: [isbn_13], onDelete: NoAction, onUpdate: NoAction, map: "commento_ibfk_2")
  utente    utente   @relation(fields: [id_utente], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "commento_ibfk_1")

  @@id([id_utente, id_libro, data_pub])
  @@index([id_libro], map: "id_libro")
}

model composizione {
  id_autore Int
  id_libro  String @db.Char(13)
  autore    autore @relation(fields: [id_autore], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "composizione_ibfk_1")
  libro     libro  @relation(fields: [id_libro], references: [isbn_13], onDelete: NoAction, onUpdate: NoAction, map: "composizione_ibfk_2")

  @@id([id_autore, id_libro])
  @@index([id_libro], map: "id_libro")
}

model editore {
  id            Int             @id @default(autoincrement())
  nome          String          @unique(map: "nome") @db.VarChar(255)
  pubblicazione pubblicazione[]
}

model evento_in_persona {
  id                        Int                         @id @default(autoincrement())
  nome                      String                      @db.VarChar(255)
  descrizione               String                      @db.VarChar(255)
  data_fine                 DateTime                    @db.Date
  data_inizio               DateTime                    @db.Date
  poster                    String?                     @db.VarChar(255)
  id_club_libro             Int
  club_libro                club_libro                  @relation(fields: [id_club_libro], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "evento_in_persona_ibfk_1")
  partecipazione_in_persona partecipazione_in_persona[]
  svolgimento               svolgimento[]
  tema_in_persona           tema_in_persona[]

  @@index([id_club_libro], map: "id_club_libro")
}

model evento_virtuale {
  id                      Int                       @id @default(autoincrement())
  nome                    String                    @db.VarChar(255)
  descrizione             String                    @db.VarChar(255)
  data_fine               DateTime                  @db.Date
  data_inizio             DateTime                  @db.Date
  piattaforma             String?                   @db.VarChar(255)
  url_e                   String?                   @db.VarChar(255)
  id_club_libro           Int
  club_libro              club_libro                @relation(fields: [id_club_libro], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "evento_virtuale_ibfk_1")
  partecipazione_virtuale partecipazione_virtuale[]
  tema_virtuale           tema_virtuale[]

  @@index([id_club_libro], map: "id_club_libro")
}

model genere {
  id           Int            @id @default(autoincrement())
  nome         String         @unique(map: "nome") @db.VarChar(127)
  appartenenza appartenenza[]
}

model iscrizione {
  id_utente  Int
  id_club    Int
  club_libro club_libro @relation(fields: [id_club], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "iscrizione_ibfk_2")
  utente     utente     @relation(fields: [id_utente], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "iscrizione_ibfk_1")

  @@id([id_utente, id_club])
  @@index([id_club], map: "id_club")
}

model libreria {
  id          Int           @id @default(autoincrement())
  citta       String        @db.VarChar(255)
  via         String        @db.VarChar(255)
  civico      Int
  svolgimento svolgimento[]
}

model libro {
  isbn_13         String            @id @db.Char(13)
  titolo          String            @db.VarChar(255)
  descrizione     String            @db.Text
  data_pub        DateTime          @db.Date
  img             String            @db.VarChar(255)
  numero_voti     Int?              @default(0)
  totale_voti     Int?              @default(0)
  appartenenza    appartenenza[]
  commento        commento[]
  composizione    composizione[]
  pubblicazione   pubblicazione[]
  segnare         segnare[]
  tema_in_persona tema_in_persona[]
  tema_virtuale   tema_virtuale[]
}

model partecipazione_in_persona {
  id_utente         Int
  id_evento         Int
  evento_in_persona evento_in_persona @relation(fields: [id_evento], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "partecipazione_in_persona_ibfk_2")
  utente            utente            @relation(fields: [id_utente], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "partecipazione_in_persona_ibfk_1")

  @@id([id_utente, id_evento])
  @@index([id_evento], map: "id_evento")
}

model partecipazione_virtuale {
  id_utente       Int
  id_evento       Int
  evento_virtuale evento_virtuale @relation(fields: [id_evento], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "partecipazione_virtuale_ibfk_2")
  utente          utente          @relation(fields: [id_utente], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "partecipazione_virtuale_ibfk_1")

  @@id([id_utente, id_evento])
  @@index([id_evento], map: "id_evento")
}

model pubblicazione {
  id_editore Int
  id_libro   String  @db.Char(13)
  editore    editore @relation(fields: [id_editore], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pubblicazione_ibfk_1")
  libro      libro   @relation(fields: [id_libro], references: [isbn_13], onDelete: NoAction, onUpdate: NoAction, map: "pubblicazione_ibfk_2")

  @@id([id_editore, id_libro])
  @@index([id_libro], map: "id_libro")
}

model segnare {
  id_libro  String @db.Char(13)
  id_utente Int
  voto      Int?   @db.SmallInt
  stato     Int    @db.SmallInt
  libro     libro  @relation(fields: [id_libro], references: [isbn_13], onDelete: NoAction, onUpdate: NoAction, map: "segnare_ibfk_1")
  utente    utente @relation(fields: [id_utente], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "segnare_ibfk_2")

  @@id([id_utente, id_libro])
  @@index([id_libro], map: "id_libro")
}

model seguire {
  id_utente_segue                          Int
  id_utente_seguito                        Int
  utente_seguire_id_utente_segueToutente   utente @relation("seguire_id_utente_segueToutente", fields: [id_utente_segue], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "seguire_ibfk_1")
  utente_seguire_id_utente_seguitoToutente utente @relation("seguire_id_utente_seguitoToutente", fields: [id_utente_seguito], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "seguire_ibfk_2")

  @@id([id_utente_segue, id_utente_seguito])
  @@index([id_utente_seguito], map: "id_utente_seguito")
}

model svolgimento {
  id_evento         Int
  id_libreria       Int
  evento_in_persona evento_in_persona @relation(fields: [id_evento], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "svolgimento_ibfk_1")
  libreria          libreria          @relation(fields: [id_libreria], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "svolgimento_ibfk_2")

  @@id([id_evento, id_libreria])
  @@index([id_libreria], map: "id_libreria")
}

model tema_in_persona {
  id_libro          String            @db.Char(13)
  id_evento         Int
  evento_in_persona evento_in_persona @relation(fields: [id_evento], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tema_in_persona_ibfk_2")
  libro             libro             @relation(fields: [id_libro], references: [isbn_13], onDelete: NoAction, onUpdate: NoAction, map: "tema_in_persona_ibfk_1")

  @@id([id_libro, id_evento])
  @@index([id_evento], map: "id_evento")
}

model tema_virtuale {
  id_libro        String          @db.Char(13)
  id_evento       Int
  evento_virtuale evento_virtuale @relation(fields: [id_evento], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tema_virtuale_ibfk_2")
  libro           libro           @relation(fields: [id_libro], references: [isbn_13], onDelete: NoAction, onUpdate: NoAction, map: "tema_virtuale_ibfk_1")

  @@id([id_libro, id_evento])
  @@index([id_evento], map: "id_evento")
}

model utente {
  id                                        Int                         @id @default(autoincrement())
  username                                  String                      @unique(map: "username") @db.VarChar(255)
  email                                     String                      @unique(map: "email") @db.VarChar(255)
  passwd                                    String                      @db.VarChar(255)
  nome                                      String                      @db.VarChar(255)
  cognome                                   String                      @db.VarChar(255)
  data_reg                                  DateTime                    @db.Date
  commento                                  commento[]
  iscrizione                                iscrizione[]
  partecipazione_in_persona                 partecipazione_in_persona[]
  partecipazione_virtuale                   partecipazione_virtuale[]
  segnare                                   segnare[]
  seguire_seguire_id_utente_segueToutente   seguire[]                   @relation("seguire_id_utente_segueToutente")
  seguire_seguire_id_utente_seguitoToutente seguire[]                   @relation("seguire_id_utente_seguitoToutente")
}
